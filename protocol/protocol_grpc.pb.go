// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bocker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BuilderClient is the client API for Builder service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BuilderClient interface {
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Builder_BuildClient, error)
}

type builderClient struct {
	cc grpc.ClientConnInterface
}

func NewBuilderClient(cc grpc.ClientConnInterface) BuilderClient {
	return &builderClient{cc}
}

func (c *builderClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Builder_BuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &Builder_ServiceDesc.Streams[0], "/protocol.Builder/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &builderBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Builder_BuildClient interface {
	Recv() (*BuildReply, error)
	grpc.ClientStream
}

type builderBuildClient struct {
	grpc.ClientStream
}

func (x *builderBuildClient) Recv() (*BuildReply, error) {
	m := new(BuildReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BuilderServer is the server API for Builder service.
// All implementations must embed UnimplementedBuilderServer
// for forward compatibility
type BuilderServer interface {
	Build(*BuildRequest, Builder_BuildServer) error
	mustEmbedUnimplementedBuilderServer()
}

// UnimplementedBuilderServer must be embedded to have forward compatible implementations.
type UnimplementedBuilderServer struct {
}

func (UnimplementedBuilderServer) Build(*BuildRequest, Builder_BuildServer) error {
	return status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedBuilderServer) mustEmbedUnimplementedBuilderServer() {}

// UnsafeBuilderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BuilderServer will
// result in compilation errors.
type UnsafeBuilderServer interface {
	mustEmbedUnimplementedBuilderServer()
}

func RegisterBuilderServer(s grpc.ServiceRegistrar, srv BuilderServer) {
	s.RegisterService(&Builder_ServiceDesc, srv)
}

func _Builder_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BuilderServer).Build(m, &builderBuildServer{stream})
}

type Builder_BuildServer interface {
	Send(*BuildReply) error
	grpc.ServerStream
}

type builderBuildServer struct {
	grpc.ServerStream
}

func (x *builderBuildServer) Send(m *BuildReply) error {
	return x.ServerStream.SendMsg(m)
}

// Builder_ServiceDesc is the grpc.ServiceDesc for Builder service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Builder_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Builder",
	HandlerType: (*BuilderServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Build",
			Handler:       _Builder_Build_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/protocol.proto",
}
