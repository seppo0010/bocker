// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package bocker

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BockerClient is the client API for Bocker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BockerClient interface {
	Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Bocker_BuildClient, error)
	Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (Bocker_RunClient, error)
}

type bockerClient struct {
	cc grpc.ClientConnInterface
}

func NewBockerClient(cc grpc.ClientConnInterface) BockerClient {
	return &bockerClient{cc}
}

func (c *bockerClient) Build(ctx context.Context, in *BuildRequest, opts ...grpc.CallOption) (Bocker_BuildClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bocker_ServiceDesc.Streams[0], "/protocol.Bocker/Build", opts...)
	if err != nil {
		return nil, err
	}
	x := &bockerBuildClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bocker_BuildClient interface {
	Recv() (*ExecReply, error)
	grpc.ClientStream
}

type bockerBuildClient struct {
	grpc.ClientStream
}

func (x *bockerBuildClient) Recv() (*ExecReply, error) {
	m := new(ExecReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *bockerClient) Run(ctx context.Context, in *RunRequest, opts ...grpc.CallOption) (Bocker_RunClient, error) {
	stream, err := c.cc.NewStream(ctx, &Bocker_ServiceDesc.Streams[1], "/protocol.Bocker/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &bockerRunClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Bocker_RunClient interface {
	Recv() (*ExecReply, error)
	grpc.ClientStream
}

type bockerRunClient struct {
	grpc.ClientStream
}

func (x *bockerRunClient) Recv() (*ExecReply, error) {
	m := new(ExecReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BockerServer is the server API for Bocker service.
// All implementations must embed UnimplementedBockerServer
// for forward compatibility
type BockerServer interface {
	Build(*BuildRequest, Bocker_BuildServer) error
	Run(*RunRequest, Bocker_RunServer) error
	mustEmbedUnimplementedBockerServer()
}

// UnimplementedBockerServer must be embedded to have forward compatible implementations.
type UnimplementedBockerServer struct {
}

func (UnimplementedBockerServer) Build(*BuildRequest, Bocker_BuildServer) error {
	return status.Errorf(codes.Unimplemented, "method Build not implemented")
}
func (UnimplementedBockerServer) Run(*RunRequest, Bocker_RunServer) error {
	return status.Errorf(codes.Unimplemented, "method Run not implemented")
}
func (UnimplementedBockerServer) mustEmbedUnimplementedBockerServer() {}

// UnsafeBockerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BockerServer will
// result in compilation errors.
type UnsafeBockerServer interface {
	mustEmbedUnimplementedBockerServer()
}

func RegisterBockerServer(s grpc.ServiceRegistrar, srv BockerServer) {
	s.RegisterService(&Bocker_ServiceDesc, srv)
}

func _Bocker_Build_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BuildRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BockerServer).Build(m, &bockerBuildServer{stream})
}

type Bocker_BuildServer interface {
	Send(*ExecReply) error
	grpc.ServerStream
}

type bockerBuildServer struct {
	grpc.ServerStream
}

func (x *bockerBuildServer) Send(m *ExecReply) error {
	return x.ServerStream.SendMsg(m)
}

func _Bocker_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RunRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BockerServer).Run(m, &bockerRunServer{stream})
}

type Bocker_RunServer interface {
	Send(*ExecReply) error
	grpc.ServerStream
}

type bockerRunServer struct {
	grpc.ServerStream
}

func (x *bockerRunServer) Send(m *ExecReply) error {
	return x.ServerStream.SendMsg(m)
}

// Bocker_ServiceDesc is the grpc.ServiceDesc for Bocker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bocker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protocol.Bocker",
	HandlerType: (*BockerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Build",
			Handler:       _Bocker_Build_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Run",
			Handler:       _Bocker_Run_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protocol/protocol.proto",
}
